// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

RWTexture3D<float4> out_result : register(u0);
RWTexture3D<float4> in_froxelVolume : register(u1);

#include "common/skyResolver.hlsl"

float3 rayMarching(float3 readCoord, float3 eyeDir, float3 eyePos, float3 sunPos, float sunIntensity, float3 kRlh, float kMie, float g)
{
	sunPos = normalize(sunPos);
	eyeDir = normalize(eyeDir);

	// Calculate the step size of the secondary ray.
	float jStepSize = 1.0 / 8.0;

	// Initialize accumulators for Rayleigh and Mie scattering.
	float3 rayleigh_collected = float3(0, 0, 0);
	float3 mie_collected = float3(0, 0, 0);

	// Calculate the Rayleigh and Mie phases.
	float cosTheta = dot(eyeDir, sunPos);
	float pRlh = rayleigh(cosTheta);
	float pMie = mie_Schlick(cosTheta, g);

	float4 froxelPos = float4(readCoord, 1.0);

	// Calculate the height of the sample.
	float iHeight = froxelPos.y;

	// Calculate the optical depth of the Rayleigh and Mie scattering for this step.
	float odStepRlh = exp(-iHeight);
	float odStepMie = exp(-iHeight);

	// Initialize the secondary ray time.
	float jTime = 0.0;

	// Initialize optical depth accumulators for the secondary ray.
	float jOdRlh = 0.0;
	float jOdMie = 0.0;

	// Sample the secondary ray.
	for (int j = 0; j < 8; j++)
	{
		// Calculate the secondary ray sample position.
		float3 jPos = eyePos + sunPos * jTime * jStepSize;

		// Calculate the height of the sample.
		float jHeight = jPos.y;

		// Accumulate the optical depth.
		jOdRlh += exp(-jHeight * jStepSize);
		jOdMie += exp(-jHeight * jStepSize);

		// Increment the secondary ray time.
		jTime += jStepSize;

		// Calculate attenuation.
		float3 attn = exp(-(kMie * (odStepMie + jOdMie) + kRlh * (odStepRlh + jOdRlh)));

		// Accumulate scattering.
		rayleigh_collected += jOdRlh * attn;
		mie_collected += jOdMie * attn;
	}

	// Calculate and return the final color.
	return sunIntensity * (pRlh * kRlh * rayleigh_collected + pMie * kMie * mie_collected);
}

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.x < dispatchParams[6].numThreads.x
		&& input.dispatchThreadID.y < dispatchParams[6].numThreads.y
		&& input.dispatchThreadID.z < dispatchParams[6].numThreads.z)
	{
		float3 l_writeCoord = float3(input.dispatchThreadID);
		float4 froxel = in_froxelVolume[l_writeCoord];
		float3 l_readCoord = l_writeCoord / float3(dispatchParams[6].numThreads.xyz);

		if (froxel.a != 0.0)
		{
			float2 frag_coord = l_readCoord.xy;
			frag_coord = (frag_coord - 0.5) * 2.0;
			float4 device_normal = float4(frag_coord, 0.0, 1.0);
			float4 eye_normal = mul(device_normal, perFrameCBuffer.p_inv);
			eye_normal = eye_normal / eye_normal.w;
			float3 eyedir = normalize(eye_normal.xyz);

			float3 lightdir = -perFrameCBuffer.sun_direction.xyz;
			float3 eye_position = float3(0.0, 0.0, 0.0);

			float3 color = float3(0.0, 0.0, 0.0);

			float3 scattering = 25.0 * float3(0.25, 0.5, 1.0);
			float3 absorption = 0.0 * float3(0.75, 0.5, 0.0);

			color = rayMarching(
				l_readCoord,
				eyedir,							// normalized ray direction
				eye_position,					// ray origin
				lightdir,                       // position of the sun
				1000.0,                      // intensity of the sun
				float3(5.8e-6, 13.5e-6, 33.1e-6),// Rayleigh scattering coefficient
				21e-6,							// Mie scattering coefficient
				0.758                           // Mie preferred scattering direction
				);

			float4 l_result = float4(color, 1.0);

			out_result[l_writeCoord] = l_result;
		}
		else
		{
			out_result[l_writeCoord] = float4(0.0f, 0.0f, 0.0f, 0.0f);
		}
	}
}