// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

Texture3D<float4> in_irradianceVolume : register(t0);
RWTexture3D<float4> out_result : register(u0);

SamplerState SamplerTypeLinear : register(s0);

// Beer-Lambert law for extinction
float getExtiction(float3 pos)
{
	return exp(-length(pos));
}

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.x < dispatchParams[7].numThreads.x
		&& input.dispatchThreadID.y < dispatchParams[7].numThreads.y
		&& input.dispatchThreadID.z < dispatchParams[7].numThreads.z)
	{
		int l_stepCount = dispatchParams[7].numThreads.z - input.dispatchThreadID.z;

		float3 posVS = float3(input.dispatchThreadID) / float3(dispatchParams[7].numThreads.xyz);
		posVS /= dispatchParams[7].numThreads;
		posVS *= (voxelizationPassCBuffer.volumeExtend * 0.5);

		float4 Lo = float4(0.0f, 0.0f, 0.0f, 0.0f);

		int3 l_readCoord = input.dispatchThreadID;

		for (int i = 0; i < l_stepCount; i++)
		{
			l_readCoord.z = input.dispatchThreadID.z + i;
			float4 Lscat = in_irradianceVolume[l_readCoord];
			Lscat *= getExtiction(posVS);
			Lo += Lscat;
		}

		out_result[input.dispatchThreadID] = Lo;
	}
}