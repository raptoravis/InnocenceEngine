// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

RWTexture3D<float4> out_irradianceVolume : register(u0);
RWTexture3D<float4> in_froxelVolume : register(u1);
Texture2DArray in_SunShadow : register(t0);

SamplerState SamplerTypePoint : register(s0);

#include "common/shadowResolver.hlsl"

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.x < dispatchParams[6].numThreads.x
		&& input.dispatchThreadID.y < dispatchParams[6].numThreads.y
		&& input.dispatchThreadID.z < dispatchParams[6].numThreads.z)
	{
		float4 albedo = in_froxelVolume[input.dispatchThreadID];

		float4 Lo = float4(perFrameCBuffer.sun_illuminance.xyz, 1.0f);

		float3 l_readCoord = float3(input.dispatchThreadID) / float3(dispatchParams[6].numThreads.xyz);

		float4 eyePos = float4(l_readCoord, 1.0);
		eyePos.xyz = eyePos.xyz * 2.0 - 1.0;
		eyePos = mul(eyePos, perFrameCBuffer.p_inv);
		eyePos /= eyePos.w;
		eyePos = mul(eyePos, perFrameCBuffer.v_inv);

		Lo *= 1.0 - SunShadowResolver(eyePos, SamplerTypePoint);
		out_irradianceVolume[input.dispatchThreadID] = Lo;
	}
}